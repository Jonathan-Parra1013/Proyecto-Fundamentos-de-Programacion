Proyecto de clase de Python aplicado.
Fundamentos de Programación

Nombre del Proyecto

1. Información General
   * Nombre estudiantes: Jonathan Parra, Carol Daniela Muñoz, David Santiago Granja Espinosa y Juan Enrique Galeano Vargas.
   * Curso/Grupo: A
   * Fecha de entrega: 17/11/2025
   * Profesor: Pablo Enrique Carreño

2. Título del Proyecto

* Análisis de datos de la Premier League.

3. Descripción del Proyecto

   * Este proyecto tiene como propósito analizar las estadisticas de la liga inglesa o la premier league, con el fin de extraer información clave sobre el rendimiento de los equipos, partidos y estadisticas de los jugadores de la premier league. La idea es facilitar el acceso a datos relevantes de forma automatizada, utilizando herramientas de programación en phyton.
-Propósito del proyecto:
   * Este proyecto les permite a los usuarios obtener información clave de manera automatizada y eficiente, resolviendo el problema de la inaccesibilidad de interpretar grandes cantidades de datos estadísticos sin las herramientas adecuadas. Además de esto, automatizar la recopilación y el análisis de estadísticas, les permite a los usuarioscentrarse en el análisis en lugar de la extensa recolección manual de datos.
-Público objetivo:
   * Este proyecto está dirigido principalmente a fanáticos del fútbol,analistas deportivos, entrenadores y periodistas, quienes podrán usar el programa con el fin de analizar los resultados obtenidos para tomar decisiones informadas, seguir las estadisticas de los equipos y jugadores, y generar reportes de manera más eficiente.
-Resultado esperado:
   * Se espera que este proyecto genere las estadisticas permitiendole visualizarlas ayudando a identificar patrones, tendencias y precciones sobre las estadisticas de los jugadores y equipos de la premiere league. Al final, el objetivo es mejorar la comprensión de las estadísticas y proporcionar a los usuarios una herramienta potente para hacer análisis deportivos profundos de manera rápida y precisa.

4. Objetivos

-General:
   * Desarrollar una herramienta que permita analizar las estadisticas deportivas de la Premier League temporada 2024-25 de forma automatizada, que permita obtener, procesar y visualizar datos relevantes sobre los equipos que compiten en esta misma (incluyendo partidos, goles y asistencias). Facilitando a los fanaticos, analistas deportivos, entrenadores y periodistas a tener esta informacion de manera clara, sencilla y actualizada. 
-Específicos:
   * Mostrar las listas, tuplas, diccionarios, para almancenar y manipular grandes cantidades de datos.
   * Implementar funciones para tareas especificas como para cargar los datos y procesamiento de estadisticas, calcular estadisticas simpples como goles, partidos jugados, ganados, emaptados, perdidos, total de goles por equipo, puntos en la temporada y demas, usando tambien la modularizacion permitiendonos organizar el codigo en diferentes modulos.

5. Requisitos

   1. BUCLE FOR: Permite iterar sobre secuencias como listas, cadenas o rangos numericos. Su uso fue clave para recorrer listas de jugadores, equipos o partidos, facilitando el procesamiento individual de cada elemento.
   2. BUCLE WHILE: Ejecuta un bloque de instrucciones mientras se cumpla una condición lógica. Este tipo de bucle resulto útil en procesos donde se requeria esperar hasta que cierta condición se cumpliera, por ejemplo: para validar entradas de usuario o realizar cálculos acumulativos.
   3. ESTRUCTURAS CONDICIONALES IF-ELIF-ELSE: Estas sentencias fueron utilizadas para tomar decisiones dentro del programa, permitiendo ejecutar distintas acciones según las condiciones del flujo de datos, como comparar estadisticas o filtrar información relevante.
   4. FUNCION RANGE(): Se utilizó para generar secuencias de números enteros especialmente útil en bucles for, permitiendo iteraciones controladas, como al recorrer listas con indices o establecer limites numéricos en analisis estadisticos.
   5. FUNCION INPUT: Permitió la interacción con el usuario mediante la recolección de datos desde la consola, fundamental para aplicaciones dinámicas donde se requiere personalizar las consultas según el interés del usuario.
   6. FUNCION LEN(): Se utilizó para conocer la cantidad de elementos presentes en listas o cadenas, siendo útil al contar registros, validar datos o controlar ciclos.
   7. FUNCIONES DE CONVERSION DE TIPO (INT(), FLOAT(), STR()): Estas funciones facilitaron la transformación de datos entre tipos numéricos y cadenas, algo indispensable al trabajar con datos provenientes de fuentes externas o entradas del usuario.
   8. DEFINICION DE FUNCIONES MEDIANTE DEF: Se crearon funciones personalizadas para modularizar el código, facilitando su mantenimiento, reutilización y claridad. Cada función resolvía una tarea específica, como analizar un partido, calcular promedios o generar reportes.
   9. INSTRUCCIÓN RETURN: Utilizada dentro de funciones para devolver resultado al programa principal, haciendo posible encadenar cádenas o reutilizar valores procesados.
   10. MÉTODO APPEND() DE LISTAS: Permitió agregar elementos dinámicamente a una lista, como al construir una colección de partidos o estadísticas filtradas por algún criterio específico.
   11. USO DE DICCIONARIOS: Los diccionarios fueron una estructura clave para organizar datos relacionados por claves y valores, por ejemplo, para representar los atributos de un jugador o los resultados de un partido
   12: INSTRUCCIONES BRAK Y CONTINUE: El break fue utilizado para interrumpir bucles cuando se cumplía cierta condición, mientras que continue permitió omitir una iteración específica y continuar con el resto del ciclo. Ambas instrucciones ofrecieron mayor control sobre la lógica del programa.

 -REQUISITOS DE PROGRAMACIÓN:
    1. LISTAS Y DICCIONARIOS: Para guardar y organizar la información de equipos, jugadores y partidos.
    2. BUCLES (FOR Y WHILE): Para recorrer los datos y realizar cálculos automáticos.
    3. CONDICIONALES (IF, ELIF, ELSE): Para tomar decisiones (Ejemplo: Si un equipo ganó, empató o perdió.)
    4. FUNCIONES: Para dividir el programa en partes más pequeñas y faciles de entender.
    5. ENTRADA Y SALIDA DE DATOS: Con input() para que el usuario consulte información y print() para mostrar resultados.
    6. MANEJO DE TIPOS DE DATOS: Transformar texto en números (int, float, str) para hacer operaciones.

-REQUISITOS TÉCNICOS:
    1. Tener instalado (PYTHON 3.10 O SUPERIOR)
    2. Usar un editor de código como: (VS code, PyCharme o incluso Google Colab) para ejecutar el programa.
    3. Que sea compatible con Windows, macOS y/o Linux

-EJEMPLO DE APLICACION:
    1. Guardar en una lista los equipos de la Premier League.
    2  Usar un Bucle FOR para recorrer esa lista y mostrar cada equipo, tabla de goleadores, tabla de asistidores, equipos que juegan champions league, europa league y los equipos que descienden.
    3. Crear un diccionario para un equipo, con claves como: {"Goles":10, "Partidos":5, "Puntos":12}.

6. Diseño del Proyecto

-Arquitectura o estructura del programa:
   * El proyecto se divide en funciones que cumplen tareas específicas tales como:
      -cargar_datos(): Almacena equipos y resultados.
      -calcular_estadisticas(): Obtiene partidos ganados, empatados, perdidos, goles y puntos.
      -mostrar_resultados(): Imprime en pantalla las estadísticas.
      -ver_goleador(): Muestra el máximo goleador con sus goles.
-Diagrama de flujo:
   * Inicio ---> Cargar datos ---> Procesar estadísticas ---> Mostrar resultados y estádisticas ---> Fin.
-Interfaz: Se maneja por consola, El usuario puede elegir opciones como:
   1. Inicio.
   2. Cargar datos.
   3. Ver tabla de equipos.
   4. Ver estádisticas.
   5. Salir.

7. Desarrollo

-A continuacion explicaremos a detalle el proceso de desarrollo de nuestro proyecto, dando a detalle sus caracteristicas y requisitos solicitados:
  * Explicación paso a paso de cómo se desarrolló el proyecto
   1. Primero planteamos objetivamente la Metodología y pasos de desarrollo: Fue la guia principal para idear como queriamos plantear el proyecto, su esructura y caracteristicas, ademas de empezar a construir nuestro proyecto ya con un enfoque determinado, es decir el resultado final que queremos proyectarle al usuario.
Los puntos principales a tener en cuenta fueron planificación y alcance, para esto trabajamos en base a nuestro tema central, es decir:
Analizar la Premier League 2024–25 (equipos, partidos, goles, asistencias y goleadores) y en consecuencia a esto nos fue fundamental la eleccion del público objetivo que en este caso son: analistas, entrenadores, periodistas y aficionados. 
Una vez tenemos esto claro se nos facilita idear cual seria la interfaz más acertada y comoda para el publico ya mencionado.
 1.2 Continuamos con nuestra materia prima, la informacion, para ser más concisos la selección y obtención de datos:
Debemos buscar fuentes confiables como: 
Archivos CSV públicos (CSV =(Comma Separated Values) archivo con datos guardados en tabla (separados por comas).)
APIs ((Application Programming Interface) Es una manera de conectarse en línea para pedir datos actualizados como resultados en vivo). En el contexto deportivo podriamos llegar a  ver  (p. ej. football-data.org, API-Football, o datasets en Kaggle/FBref)
 1.3 En este punto es fundamental el diseño de la estructura del programa que se divide en dos secciones:
Primero planteampos la arquitectura modular:
-Módulo io (Input/Output = Entrada/Salida)
 Aquí va todo lo relacionado con cargar la información de la Premier League.
Por ejemplo podriamos usar una funcion llamada: cargar_datos()
Responsabilidad: leer la tabla (CSV, Excel o JSON) y devolverla como estructura (lista, diccionario o  en un conyexto mas avanzado un DataFrame).
-Módulo processing (Procesamiento o cálculos)
Aquí está la “lógica” del programas se encargara de hacer cálculos, operaciones o transformaciones con los datos que carguemos
podiramos definir funciones como: calcular_estadisticas() que poria determinar el campeón, los puestos de Champions, Europa League y descensos o otro ejemplo ver_goleador():  podria calcular goleadores y asistidores.
  2. Analizar la Premier League 2024–25 (equipos, partidos, goles, asistencias y goleadores) y en consecuencia a esto nos fue fundamental la eleccion del público objetivo que en este caso son: analistas, entrenadores, periodistas y aficionados. 
Una vez tenemos esto claro se nos facilita idear cual seria la interfaz más acertada y comoda para el publico ya mencionado. 
Pensamos que la elección de usar una interfaz basada en consola es una forma eficaz de alcanzar a este público, ya que la mayor parte del trabajo será el análisis de datos y no tanto la parte visual. Esto tiene concuerda con nuestro planteamiento de brindar una interfaz cómoda para el público objetivo.

-Módulo reports (Reportes/Exportación de resultados)
Se encargara de generar informes o salidas organizadas con los resultados, poor ejemplo imprimir en la consola un resumen con las estadísticas finales.
Si se quisiera guardar o exportar resultados a un archivo concreto podriamos usar funciones como:
  
  3. Continuamos con nuestra materia prima, la informacion, para ser más concisos la selección y obtención de datos:
si bien en la versión actual los datos se ingresan manualmente (como parte de muestro planteamiento inicial), nos basamos en fuentes reales y confiables para entender qué tipo de datos estamos procesando, cómo se estructuran y cómo podrían integrarse en futuras versiones del proyecto mediante archivos CSV o APIs.

Algunas de las fuentes  principales de consulta y análisis de datos fueron:
 Premier League – Página oficial:
Este fue el sitio principal para consultar resultados oficiales, estadísticas por equipo, calendario de partidos entre otros, Nos fue fundamental para validar que los datos que usamos en el análisis estén alineados con la realidad.
 SofaScore:
Nos permitio ampliar el análisis más allá de lo básico (goles y puntos), hacia parametros más amplios, teniendo mas disponilibilidad y acceso a informacion reelevante para el desarrollo de nuestrom proyecto.
Encontramos informacion acerca de:
Rendimiento por jugador (pases, duelos ganados, precisión), Mapas de calor, estadísticas avanzadas y comparativas, Clasificaciones de goleadores y asistidores.
 Football-Data:
Nos permitio visualizar datasets en formato CSV (Valores Separados por Comas o Comma Separated Values) es un formato de archivo de texto simple que almacena datos en formato tabular, y que son descargables , lo cual es una de las bases centrales de este proyecto.
Encontramos archivos que contenian informacion acerca de: Resultados de partidos, Cuotas de apuestas, estadísticas históricas por temporada, etc.
 Understat:
Este sitio web es especializado en estadísticas avanzadas tales como:(xG (goles esperados), xA (asistencias esperadas), Rendimiento individual y colectivo de los equipos)
 OneFootball:
Nos sirvio como fuente complementaria para validar datos de rendimiento, consultar alineaciones o seguir la evolución de jugadores destacados, lo cual es muy  útil en la interpretación e ingreso de los resultados en el programa.
 (Tambien empleamos el uso de librerías externas: pandas y openpyxl:)

Para mejorar el manejo y análisis de datos en nuestro proyecto, instalamos en el entorno las librerías pandas y openpyxl, herramientas fundamentales para trabajar con grandes volúmenes de datos deportivos de manera eficiente.
 pandas:
Esta biblioteca nos permite cargar, manipular y analizar los datos de la Premier League de forma estructurada y sencilla. Con pandas pudimos leer archivos en formato CSV y Excel, organizar la información en tablas (DataFrames), realizar cálculos estadísticos como promedios y totales, y filtrar datos relevantes para nuestro análisis. Gracias a pandas, la gestión de la información fue mucho más rápida y menos propensa a errores en comparación con la manipulación manual mediante listas o diccionarios.

A coontinuacion mencionamos y explicamos de forma rapida algunas librerias  que tuvimos en cuenta en el desarrollo y planeacion del codigo, aunque no se usen directamente, la informacion que encontramos en estas librerias es fundamental para la mejora a fututo de nuestro proyecto.
 numpy:
Manejo de arreglos numéricos y cálculos matemáticos rápidos.
 matplotlib, contourpy, cycler, kiwisolver, fonttools, pillow, pyparsing:
Se usan normalmente para crear gráficos y visualizaciones.
 openpyxl:
Permiten leer y escribir archivos Excel.
 packaging, python-dateutil, pytz, tzdata, six:
Son librerías de soporte y compatibilidad: manejo de versiones, fechas y zonas horarias.

(ACLARACION:) Para el desarrollo del proyecto de análisis de la Premier League en Python y los mapas de calor con respecto a los jugadores en el mismo, se planea utilizar las siguientes librerías clave:
mplsoccer:
Permite dibujar campos de fútbol personalizados.
Facilita la creación de mapas de calor directamente sobre el campo (por ejemplo, con Pitch().heatmap()), lo cual es útil para analizar zonas de acción o posicionamiento de jugadores.
Es una herramienta especializada en visualización de datos futbolísticos.

seaborn:
Librería basada en Matplotlib que permite generar visualizaciones estadísticas más limpias y estilizadas.
Ideal para crear mapas de calor de densidad con suavizado, lo que mejora la interpretación visual de los datos.
Aporta un enfoque más analítico y estético a las visualizaciones.

Estas seran necesarias para realizar los mapas de calor que administran de igual manera informacion acerca de los jugadores.
CONCPTO CLAVE: mapas de calor
Son representaciones visuales que muestran la intensidad o frecuencia de eventos en distintas áreas de un espacio, usando colores (generalmente del azul al rojo).
En fútbol, se usan para visualizar:

-Las zonas donde un jugador pasa más tiempo.

-Dónde se recupera el balón.

-Dónde se generan más ataques o disparos.

-Ayudan a entender el comportamiento táctico, el posicionamiento y la influencia de un jugador o equipo en el campo.
Estas herramientas juntas permiten pasar de datos crudos (números, posiciones, eventos) a visualizaciones claras y analíticas, facilitando la toma de decisiones o el análisis táctico en el fútbol.
Y analizando entre las distintas opciones que teniamos filtramos para encontrar las librerias que fueran mas aptas teniendo en cuenta las necesidades de nuestro proyecto

¿Y como adaptamos estas librerias a nuestro proyecto?
Para poder utilizar las librerías pandas y openpyxl en nuestro proyecto de Python, nos fue necesario instalarlas previamente en nuestro entorno de desarrollo, que en esta ocasion es  Visual Studio Code, usamos comandos como pip install pandas y pip istall openpyxl en la terminal de VS Code, pip descarga las librerías desde internet y las instala en el Python
Dentro de VS Code, abrimos la terminal integrada para poder ejecutar comandos directamente, consecuente a estos pasos verificamos que Python y pip estén instalados para correr adecuadamente el programa.
   
   4. Diseño general de la estructura del programa
Por ahora, en esta versión principal, desarrollamos un modelo de entrada manual de datos a través de consola, pero como una visualizacion a futuro proyectamos la integración de fuentes externas y avanzadas para automatizar la recopilación y análisis de información en las siguientes etapas del proyecto.
El proyecto se organiza mediante funciones que cumplen tareas específicas, como la recopilación de datos (analizar_premier()), el cálculo de estadísticas y la visualización de los resultados, nos basamos en los principios básicos de la programación estructurada y modular en python, con el objetivo de hacerlo claro, ordenado, fácil de entender,  mantener y asi mismo evolucionar.
La parte del ingreso de datos es interactivo (a través de la consola como ya lo mencionamos) como primera fase esto encaja con la idea de que los usuarios puedan ingresar información y obtener resultados rápidos.
 Como estructura general del programa podemos describir los dos componentes principales:

-Una función principal llamada analizar_premier() que contiene toda la lógica de procesamiento de datos.

-El bloque de ejecución del programa, donde se llama a la función y se imprime el mensaje de finalización.

  5. Descripcion detallada de la estructura del programa, incluyendo fragmetos de codigo y su explicacion
Este programa los diseñamos con el fin de analizar información de la Premier League (2024–2025), mostrando los equipos que participaron y permitiendo al usuario consultar los jugadores y estadísticas de un equipo específico, usando la librería Pandas de Python.

Como estructura general del programa tenemos que el código se puede dividir en cinco partes principales:

 1-Importación de librerías de datos desde un archivo Excel

 2-Listado de equipos ordenados alfabéticamente

 3-Definición de funciones (para filtrar jugadores y mostrar información)

 4-Ejecución del programa principal
  A continuacion explicaremos cada parte mas claramente...

1. Importación de la librería

             # IMPORTAMOS LIBRERIA PANDAS
             import pandas as pd
Explicación: Se importa la librería pandas, que se usa para trabajar con datos en forma de tablas (como hojas de Excel o bases de datos).
El alias pd se utiliza para abreviar el nombre y facilitar su uso más adelante, cuando sea necesario referenciarlo de nuevo.

2. Carga de la base de datos

             BASE_DATOS = pd.read_excel('data/TABLAPREMIER.xlsx', sheet_name='Hoja2')

Explicación:Aqui se lee un archivo de Excel llamado TABLAPREMIER.xlsx, en el cual esta la informacion acerca de los jugadores y lo ubicamos en la carpeta data, tomando los datos de la Hoja2.
El resultado se guarda en un DataFrame llamado BASE_DATOS, que se comporta como una tabla con filas y columnas.

3. Mostrar los equipos participantes


             Nombre_Equipos = BASE_DATOS["Equipo"].unique()
            print("Los Equipos que jugaron en la PREMIER LEAGUE (2024-2025) ")
            print("En orden alfabetico son: ")
            print("-----------------------------------")
            for Orden_Equipo in sorted(Nombre_Equipos):
            print("-", Orden_Equipo)


Explicación: Aqui se obtiene la lista de equipos únicos usando .unique().
Luego se ordenan alfabéticamente con sorted().
Finalmente, se muestran por pantalla uno a uno.
 Como punto clave nos gustaria aclarar el uso de unique() y sorted(), ya que son funciones muy comunes en Python y en Pandas

  unique() es una función de la librería Pandas.
Se aplica a una serie o columna de un DataFrame para obtener los valores únicos (sin repetir).

EN NUESTRO CODIGO SE APLICO DE ESTA MANERA:

Nombre_Equipos = BASE_DATOS["Equipo"].unique()

BASE_DATOS es el DataFrame cargado con los datos del Excel.

BASE_DATOS["Equipo"] selecciona la columna llamada “Equipo”.

.unique() devuelve un arreglo (tipo numpy array) con los nombres de los equipos sin duplicados.

  sorted() es una función integrada de Python (NATIVA DE PYTHON)
No pertenece a Pandas ni a ninguna librería externa.

EN NUESTRO CODIGO SE APLICO DE ESTA MANERA:

for Orden_Equipo in sorted(Nombre_Equipos):
    print("-", Orden_Equipo)

Nombre_Equipos es una lista o arreglo (que salió del .unique()).

sorted() ordena los elementos alfabéticamente o numéricamente.

Devuelve una nueva lista ordenada, sin modificar el original.

4. Definición de funciones principales

Nuestro programa define dos funciones que se encargan de interactuar con el usuario.

 Función 1: Jugadores_Equipo() → Filtra jugadores por equipo
 Función 2: Solicitar_Jugadores(Jugadores) → Muestra jugadores y estadísticas

(Estas funciones las explicaremos un poco mas detalladas a continuacion pues cumplen un papel fundamental en nuestra estructura de codigo.)

5. Ejecución del programa principal
      Jugadores_Equipo()
      Solicitar_Jugadores(Jugadores_Equipo())

Explicación: Estas líneas hacen que el programa empiece a ejecutarse.
Primero se llama a la función Jugadores_Equipo() para obtener el equipo elegido, y luego se pasa ese resultado a Solicitar_Jugadores() para mostrar los jugadores y sus estadísticas.

En este programa implementamos programación modular, ya que se dividió el código en funciones independientes (Jugadores_Equipo() y Solicitar_Jugadores().)
Aunque por ahora el programa es pequeño a futuro será muy útil, ya que permitirá ampliar el programa, agregar nuevas funciones (como estadísticas, gráficos o filtros) y mantener el código más ordenado y fácil de modificar.

6.Descripción de las funciones principales
Nuestro programa implementa dos funciones principales que organizan y controlan la interacción con el usuario: Como un pequeño apunte las recordamos= Jugadores_Equipo() y Solicitar_Jugadores(). Aunque previamente las mencionamos
Ambas funciones fueron diseñadas para aplicar el enfoque de programación modular, facilitando la lectura y mantenimiento del código.

   1. Función Jugadores_Equipo()

def Jugadores_Equipo():
    Solicitud_Equipo = input("Ingrese el nombre del equipo que desea ver sus jugadores: ")
    if Solicitud_Equipo in Nombre_Equipos:
        Jugadores = BASE_DATOS[BASE_DATOS["Equipo"].str.lower() == Solicitud_Equipo.lower()]
        return Jugadores    
    else:
        print("El equipo ingresado no se encuentra en la base de datos, revisa la ortografia e intentalo de nuevo :)")


Esta función tiene como objetivo solicitar al usuario el nombre del equipo cuyos jugadores desea consultar.
Primero, utiliza input() para recibir el dato ingresado por el usuario y verifica si el equipo existe dentro del conjunto Nombre_Equipos.
En caso de encontrarlo, filtra la base de datos con ayuda de Pandas, seleccionando únicamente las filas donde el valor de la columna "Equipo" coincide con el nombre proporcionado.
Si el equipo no se encuentra, muestra un mensaje de advertencia invitando al usuario a revisar la ortografía.

De esta forma, la función cumple el papel de filtrar información dentro del DataFrame y controlar la validación de entrada del usuario, siendo un punto clave en la interacción con los datos.


2. Función Solicitar_Jugadores(Jugadores)

def Solicitar_Jugadores(Jugadores):
    if len(Jugadores) > 0:
        print("-----------------------------------")
        print("Los JUGADORES del equipo son: ")
        print("- NOMBRE - - - - - POSICION - - - - - DORSAL -")
        for _, Jugador in Jugadores.iterrows():
            print("-", Jugador["Nombre"], "(", Jugador["Posicion"], ")", "#", Jugador["Dorsal"])     
        else:
            print("El equipo ingresado no se encuentra en la base de datos, revisa la ortografia e intentalo nuevamente :)")
            
    Solicitud_Jugador = input("Ingrese el nombre completo del jugador que desea ver sus estadisticas: ")
    if Solicitud_Jugador in BASE_DATOS["Nombre"]:
        Estadisticas_Jugador = BASE_DATOS[BASE_DATOS["Nombre"].str.lower() == Solicitud_Jugador.lower()]


Esta función se encarga de mostrar los jugadores del equipo seleccionado y permitir que el usuario elija uno para consultar sus estadísticas:

-Primero, verifica que el conjunto Jugadores contenga datos válidos (es decir, que el equipo exista). Luego, recorre cada fila del DataFrame utilizando iterrows() para imprimir el nombre, posición y dorsal de cada jugador de manera organizada.
-Posteriormente, solicita al usuario el nombre completo de un jugador y lo compara con los registros de la columna "Nombre" en la base de datos. Si el jugador existe, se extraen sus datos individuales, preparando el camino para mostrar sus estadísticas personales.
-Esta función cumple un papel esencial en la presentación y exploración de los datos, siendo la parte del programa que interactúa directamente con el usuario y muestra la información de manera clara.

Y para concluir recordamos que estas dos funciones complementarias empiezan a trabajar cuando se hace el llamado por medio del programa principal.


8. Pruebas y Resultados

* Capturas de pantalla o ejemplos de ejecución
* Resultados obtenidos
* Manual de usuario

9. Conclusiones
* Lecciones aprendidas
* Dificultades encontradas y cómo se resolvieron
* Posibles mejoras o ideas futuras

10. Bibliografía / Recursos

  * Premier League–Página oficial: https://www.premierleague.com/
  * OneFootball–Estadísticas deportivas: https://onefootball.com/
  * SofaScore–Resultados deportivos: https://www.sofascore.com/
  * Score360–Datos de fútbol: https://www.score360.com/
  * Football-Data: https://www.football-data.com
  * Understad: https://understat.com/
  * StatsBomb: https://statsbomb.com/
  * https://www.datacamp.com/es/blog/60-python-projects-for-all-levels-expertise
  * https://prezi.com/p/hftmx3o1n96q/analisis-de-datos-de-la-premier-league/
  * https://espndeportes.espn.com/futbol/estadisticas/_/liga/ENG.1/vista/rendimiento/temporada/2024/english-premier-league
  * https://www.espn.com.co/futbol/estadisticas/_/liga/ENG.1/temporada/2024/vista/anotaciones/goles-de-europa

















