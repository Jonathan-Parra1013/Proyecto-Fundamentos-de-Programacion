Proyecto de clase de Python aplicado.
Fundamentos de Programación

Nombre del Proyecto

1. Información General
   * Nombre estudiantes: Jonathan Parra, Carol Daniela Muñoz, David Santiago Granja Espinosa y Juan Enrique Galeano Vargas.
   * Curso/Grupo: A
   * Fecha de entrega: 17/11/2025
   * Profesor: Pablo Enrique Carreño

2. Título del Proyecto

* Análisis de datos de la Premier League.

3. Descripción del Proyecto

   * Este proyecto tiene como propósito analizar las estadisticas de la liga inglesa o la premier league, con el fin de extraer información clave sobre el rendimiento de los equipos, partidos y estadisticas de los jugadores de la premier league. La idea es facilitar el acceso a datos relevantes de forma automatizada, utilizando herramientas de programación en phyton.
-Propósito del proyecto:
   * Este proyecto les permite a los usuarios obtener información clave de manera automatizada y eficiente, resolviendo el problema de la inaccesibilidad de interpretar grandes cantidades de datos estadísticos sin las herramientas adecuadas. Además de esto, automatizar la recopilación y el análisis de estadísticas, les permite a los usuarioscentrarse en el análisis en lugar de la extensa recolección manual de datos.
-Público objetivo:
   * Este proyecto está dirigido principalmente a fanáticos del fútbol,analistas deportivos, entrenadores y periodistas, quienes podrán usar el programa con el fin de analizar los resultados obtenidos para tomar decisiones informadas, seguir las estadisticas de los equipos y jugadores, y generar reportes de manera más eficiente.
-Resultado esperado:
   * Se espera que este proyecto genere las estadisticas permitiendole visualizarlas ayudando a identificar patrones, tendencias y precciones sobre las estadisticas de los jugadores y equipos de la premiere league. Al final, el objetivo es mejorar la comprensión de las estadísticas y proporcionar a los usuarios una herramienta potente para hacer análisis deportivos profundos de manera rápida y precisa.

4. Objetivos

-General:
   * Desarrollar una herramienta que permita analizar las estadisticas deportivas de la Premier League temporada 2024-25 de forma automatizada, que permita obtener, procesar y visualizar datos relevantes sobre los equipos que compiten en esta misma (incluyendo partidos, goles y asistencias). Facilitando a los fanaticos, analistas deportivos, entrenadores y periodistas a tener esta informacion de manera clara, sencilla y actualizada. 
-Específicos:
   * Mostrar las listas, tuplas, diccionarios, para almancenar y manipular grandes cantidades de datos.
   * Implementar funciones para tareas especificas como para cargar los datos y procesamiento de estadisticas, calcular estadisticas simpples como goles, partidos jugados, ganados, emaptados, perdidos, total de goles por equipo, puntos en la temporada y demas, usando tambien la modularizacion permitiendonos organizar el codigo en diferentes modulos.

5. Requisitos

   1. BUCLE FOR: Permite iterar sobre secuencias como listas, cadenas o rangos numericos. Su uso fue clave para recorrer listas de jugadores, equipos o partidos, facilitando el procesamiento individual de cada elemento.
   2. BUCLE WHILE: Ejecuta un bloque de instrucciones mientras se cumpla una condición lógica. Este tipo de bucle resulto útil en procesos donde se requeria esperar hasta que cierta condición se cumpliera, por ejemplo: para validar entradas de usuario o realizar cálculos acumulativos.
   3. ESTRUCTURAS CONDICIONALES IF-ELIF-ELSE: Estas sentencias fueron utilizadas para tomar decisiones dentro del programa, permitiendo ejecutar distintas acciones según las condiciones del flujo de datos, como comparar estadisticas o filtrar información relevante.
   4. FUNCION RANGE(): Se utilizó para generar secuencias de números enteros especialmente útil en bucles for, permitiendo iteraciones controladas, como al recorrer listas con indices o establecer limites numéricos en analisis estadisticos.
   5. FUNCION INPUT: Permitió la interacción con el usuario mediante la recolección de datos desde la consola, fundamental para aplicaciones dinámicas donde se requiere personalizar las consultas según el interés del usuario.
   6. FUNCION LEN(): Se utilizó para conocer la cantidad de elementos presentes en listas o cadenas, siendo útil al contar registros, validar datos o controlar ciclos.
   7. FUNCIONES DE CONVERSION DE TIPO (INT(), FLOAT(), STR()): Estas funciones facilitaron la transformación de datos entre tipos numéricos y cadenas, algo indispensable al trabajar con datos provenientes de fuentes externas o entradas del usuario.
   8. DEFINICION DE FUNCIONES MEDIANTE DEF: Se crearon funciones personalizadas para modularizar el código, facilitando su mantenimiento, reutilización y claridad. Cada función resolvía una tarea específica, como analizar un partido, calcular promedios o generar reportes.
   9. INSTRUCCIÓN RETURN: Utilizada dentro de funciones para devolver resultado al programa principal, haciendo posible encadenar cádenas o reutilizar valores procesados.
   10. MÉTODO APPEND() DE LISTAS: Permitió agregar elementos dinámicamente a una lista, como al construir una colección de partidos o estadísticas filtradas por algún criterio específico.
   11. USO DE DICCIONARIOS: Los diccionarios fueron una estructura clave para organizar datos relacionados por claves y valores, por ejemplo, para representar los atributos de un jugador o los resultados de un partido
   12: INSTRUCCIONES BRAK Y CONTINUE: El break fue utilizado para interrumpir bucles cuando se cumplía cierta condición, mientras que continue permitió omitir una iteración específica y continuar con el resto del ciclo. Ambas instrucciones ofrecieron mayor control sobre la lógica del programa.

 -REQUISITOS DE PROGRAMACIÓN:
    1. LISTAS Y DICCIONARIOS: Para guardar y organizar la información de equipos, jugadores y partidos.
    2. BUCLES (FOR Y WHILE): Para recorrer los datos y realizar cálculos automáticos.
    3. CONDICIONALES (IF, ELIF, ELSE): Para tomar decisiones (Ejemplo: Si un equipo ganó, empató o perdió.)
    4. FUNCIONES: Para dividir el programa en partes más pequeñas y faciles de entender.
    5. ENTRADA Y SALIDA DE DATOS: Con input() para que el usuario consulte información y print() para mostrar resultados.
    6. MANEJO DE TIPOS DE DATOS: Transformar texto en números (int, float, str) para hacer operaciones.

-REQUISITOS TÉCNICOS:
    1. Tener instalado (PYTHON 3.10 O SUPERIOR)
    2. Usar un editor de código como: (VS code, PyCharme o incluso Google Colab) para ejecutar el programa.
    3. Que sea compatible con Windows, macOS y/o Linux

-EJEMPLO DE APLICACION:
    1. Guardar en una lista los equipos de la Premier League.
    2  Usar un Bucle FOR para recorrer esa lista y mostrar cada equipo, tabla de goleadores, tabla de asistidores, equipos que juegan champions league, europa league y los equipos que descienden.
    3. Crear un diccionario para un equipo, con claves como: {"Goles":10, "Partidos":5, "Puntos":12}.

6. Diseño del Proyecto

-Arquitectura o estructura del programa:
   * El proyecto se divide en funciones que cumplen tareas específicas tales como:
      -cargar_datos(): Almacena equipos y resultados.
      -calcular_estadisticas(): Obtiene partidos ganados, empatados, perdidos, goles y puntos.
      -mostrar_resultados(): Imprime en pantalla las estadísticas.
      -ver_goleador(): Muestra el máximo goleador con sus goles.
-Diagrama de flujo:
   * Inicio ---> Cargar datos ---> Procesar estadísticas ---> Mostrar resultados y estádisticas ---> Fin.
-Interfaz: Se maneja por consola, El usuario puede elegir opciones como:
   1. Inicio.
   2. Cargar datos.
   3. Ver tabla de equipos.
   4. Ver estádisticas.
   5. Salir.

7. Desarrollo

-A continuacion explicaremos a detalle el proceso de desarrollo de nuestro proyecto, dando a detalle sus caracteristicas y requisitos solicitados:
  * Explicación paso a paso de cómo se desarrolló el proyecto
   1. Primero planteamos objetivamente la Metodología y pasos de desarrollo: Fue la guia principal para idear como queriamos plantear el proyecto, su esructura y caracteristicas, ademas de empezar a construir nuestro proyecto ya con un enfoque determinado, es decir el resultado final que queremos proyectarle al usuario.
Los puntos principales a tener en cuenta fueron planificación y alcance, para esto trabajamos en base a nuestro tema central, es decir:
Analizar la Premier League 2024–25 (equipos, partidos, goles, asistencias y goleadores) y en consecuencia a esto nos fue fundamental la eleccion del público objetivo que en este caso son: analistas, entrenadores, periodistas y aficionados. 
Una vez tenemos esto claro se nos facilita idear cual seria la interfaz más acertada y comoda para el publico ya mencionado.
 1.2 Continuamos con nuestra materia prima, la informacion, para ser más concisos la selección y obtención de datos:
Debemos buscar fuentes confiables como: 
Archivos CSV públicos (CSV =(Comma Separated Values) archivo con datos guardados en tabla (separados por comas).)
APIs ((Application Programming Interface) Es una manera de conectarse en línea para pedir datos actualizados como resultados en vivo). En el contexto deportivo podriamos llegar a  ver  (p. ej. football-data.org, API-Football, o datasets en Kaggle/FBref)
 1.3 En este punto es fundamental el diseño de la estructura del programa que se divide en dos secciones:
Primero planteampos la arquitectura modular:
-Módulo io (Input/Output = Entrada/Salida)
 Aquí va todo lo relacionado con cargar la información de la Premier League.
Por ejemplo podriamos usar una funcion llamada: cargar_datos()
Responsabilidad: leer la tabla (CSV, Excel o JSON) y devolverla como estructura (lista, diccionario o  en un conyexto mas avanzado un DataFrame).
-Módulo processing (Procesamiento o cálculos)
Aquí está la “lógica” del programas se encargara de hacer cálculos, operaciones o transformaciones con los datos que carguemos
podiramos definir funciones como: calcular_estadisticas() que poria determinar el campeón, los puestos de Champions, Europa League y descensos o otro ejemplo ver_goleador():  podria calcular goleadores y asistidores.
  2. Analizar la Premier League 2024–25 (equipos, partidos, goles, asistencias y goleadores) y en consecuencia a esto nos fue fundamental la eleccion del público objetivo que en este caso son: analistas, entrenadores, periodistas y aficionados. 
Una vez tenemos esto claro se nos facilita idear cual seria la interfaz más acertada y comoda para el publico ya mencionado. 
Pensamos que la elección de usar una interfaz basada en consola es una forma eficaz de alcanzar a este público, ya que la mayor parte del trabajo será el análisis de datos y no tanto la parte visual. Esto tiene concuerda con nuestro planteamiento de brindar una interfaz cómoda para el público objetivo.

-Módulo reports (Reportes/Exportación de resultados)
Se encargara de generar informes o salidas organizadas con los resultados, poor ejemplo imprimir en la consola un resumen con las estadísticas finales.
Si se quisiera guardar o exportar resultados a un archivo concreto podriamos usar funciones como:
  3. Continuamos con nuestra materia prima, la informacion, para ser más concisos la selección y obtención de datos:
si bien en la versión actual los datos se ingresan manualmente (como parte de muestro planteamiento inicial), nos basamos en fuentes reales y confiables para entender qué tipo de datos estamos procesando, cómo se estructuran y cómo podrían integrarse en futuras versiones del proyecto mediante archivos CSV o APIs.

Algunas de las fuentes  principales de consulta y análisis de datos fueron:
 Premier League – Página oficial:
Este fue el sitio principal para consultar resultados oficiales, estadísticas por equipo, calendario de partidos entre otros, Nos fue fundamental para validar que los datos que usamos en el análisis estén alineados con la realidad.
 SofaScore:
Nos permitio ampliar el análisis más allá de lo básico (goles y puntos), hacia parametros más amplios, teniendo mas disponilibilidad y acceso a informacion reelevante para el desarrollo de nuestrom proyecto.
Encontramos informacion acerca de:
Rendimiento por jugador (pases, duelos ganados, precisión), Mapas de calor, estadísticas avanzadas y comparativas, Clasificaciones de goleadores y asistidores.
 Football-Data:
Nos permitio visualizar datasets en formato CSV (Valores Separados por Comas o Comma Separated Values) es un formato de archivo de texto simple que almacena datos en formato tabular, y que son descargables , lo cual es una de las bases centrales de este proyecto.
Encontramos archivos que contenian informacion acerca de: Resultados de partidos, Cuotas de apuestas, estadísticas históricas por temporada, etc.
 Understat:
Este sitio web es especializado en estadísticas avanzadas tales como:(xG (goles esperados), xA (asistencias esperadas), Rendimiento individual y colectivo de los equipos)
 OneFootball:
Nos sirvio como fuente complementaria para validar datos de rendimiento, consultar alineaciones o seguir la evolución de jugadores destacados, lo cual es muy  útil en la interpretación e ingreso de los resultados en el programa.
 (Tambien empleamos el uso de librerías externas: pandas y openpyxl:)

Para mejorar el manejo y análisis de datos en nuestro proyecto, utilizamos las librerías pandas y openpyxl, herramientas fundamentales para trabajar con grandes volúmenes de datos deportivos de manera eficiente.
 pandas:
Esta biblioteca nos permitió cargar, manipular y analizar los datos de la Premier League de forma estructurada y sencilla. Con pandas pudimos leer archivos en formato CSV y Excel, organizar la información en tablas (DataFrames), realizar cálculos estadísticos como promedios y totales, y filtrar datos relevantes para nuestro análisis. Gracias a pandas, la gestión de la información fue mucho más rápida y menos propensa a errores en comparación con la manipulación manual mediante listas o diccionarios.
A coontinuacion mencionamos y explicamos de forma rapida algunas librerias  que tuvimos en cuenta en el desarrollo y planeacion del codigo, aunque no se usen directamente, la informacion que encontramos en estas librerias es fundamental para la mejora a fututo de nuestro proyecto.
 numpy:
Manejo de arreglos numéricos y cálculos matemáticos rápidos.
 matplotlib, contourpy, cycler, kiwisolver, fonttools, pillow, pyparsing:
Se usan normalmente para crear gráficos y visualizaciones.
 openpyxl:
Permiten leer y escribir archivos Excel.
 packaging, python-dateutil, pytz, tzdata, six:
Son librerías de soporte y compatibilidad: manejo de versiones, fechas y zonas horarias.

Para el desarrollo del proyecto de análisis de la Premier League en Python, se planea utilizar las siguientes librerías clave:
mplsoccer:
Permite dibujar campos de fútbol personalizados.
Facilita la creación de mapas de calor directamente sobre el campo (por ejemplo, con Pitch().heatmap()), lo cual es útil para analizar zonas de acción o posicionamiento de jugadores.
Es una herramienta especializada en visualización de datos futbolísticos.

seaborn:
Librería basada en Matplotlib que permite generar visualizaciones estadísticas más limpias y estilizadas.
Ideal para crear mapas de calor de densidad con suavizado, lo que mejora la interpretación visual de los datos.
Aporta un enfoque más analítico y estético a las visualizaciones.

Estas nos son necesarias para realizar los mapas de calor que administran de igual manera informacion acerca de los jugadores.
CONCPTO CLAVE: mapas de calor
Son representaciones visuales que muestran la intensidad o frecuencia de eventos en distintas áreas de un espacio, usando colores (generalmente del azul al rojo).
En fútbol, se usan para visualizar:

-Las zonas donde un jugador pasa más tiempo.

-Dónde se recupera el balón.

-Dónde se generan más ataques o disparos.

-Ayudan a entender el comportamiento táctico, el posicionamiento y la influencia de un jugador o equipo en el campo.
Estas herramientas juntas permiten pasar de datos crudos (números, posiciones, eventos) a visualizaciones claras y analíticas, facilitando la toma de decisiones o el análisis táctico en el fútbol.
Y analizando entre las distintas opciones que teniamos filtramos para encontrar las librerias que fueran mas aptas teniendo en cuenta las necesidades de nuestro proyecto
¿Y como adaptamos estas librerias a nuestro proyecto?
Para poder utilizar las librerías pandas y openpyxl en nuestro proyecto de Python, nos fue necesario instalarlas previamente en nuestro entorno de desarrollo, que en esta ocasion es  Visual Studio Code, usamos comandos como pip install pandas y pip istall openpyxl en la terminal de VS Code, pip descarga las librerías desde internet y las instala en el Python
Dentro de VS Code, abrimos la terminal integrada para poder ejecutar comandos directamente, consecuente a estos pasos verificamos que Python y pip estén instalados para correr adecuadamente el programa.

Por ahora, en esta versión principal, desarrollamo un modelo de entrada manual de datos a través de consola, pero como una visualizacion a futuro proyectamos la integración de fuentes externas y avanzadas para automatizar la recopilación y análisis de información en las siguientes etapas del proyecto.
   
   4. Diseño general de la estructura del programa
El proyecto se organiza mediante funciones que cumplen tareas específicas, como la recopilación de datos (analizar_premier()), el cálculo de estadísticas y la visualización de los resultados, nos basamos en los principios básicos de la programación estructurada y modular en python, con el objetivo de hacerlo claro, ordenado, fácil de entender,  mantener y asi mismo evolucionar.
La parte del ingreso de datos es interactivo (a través de la consola) como primera fase esto encaja con la idea de que los usuarios puedan ingresar información y obtener resultados rápidos.
 Como estructura general del programa podemos describir los dos componentes principales:

-Una función principal llamada analizar_premier() que contiene toda la lógica de procesamiento de datos.

-El bloque de ejecución del programa, donde se llama a la función y se imprime el mensaje de finalización.

  5. Descripcion detallada de la estructura del programa, incluyendo fragmetos de codigo y su explicacion
El programa está diseñado para analizar los goles anotados por varios equipos de la Premier League, ingresados manualmente por el usuario, como lo planteamos en  los obetivos principales
La estructura se divide en tres partes principales:
 1. Importación de librerías
(import pandas as pd)
Se importa la librería pandas, aunque por ahora no lo usamos directamente.
(pandas es una herramienta potente para manejar y analizar datos en forma de tablas (DataFrames). En una versión más avanzada del código, la aplicaremos para almacenar los equipos y sus goles de forma estructurada
 
 2. Definición de la función principal analizar_premier()
Esta función contiene toda la lógica del programa. Dentro de ella se realizan las siguientes tareas:

a) Inicialización de listas:
equipos = []  # Lista para guardar los nombres de los equipos
goles = []    # Lista para guardar los goles de cada equipo

Aqui se crean dos listas vacías:
equipos almacenará los nombres de los equipos.
goles almacenará los goles que anota cada equipo en el mismo orden.

b) Ingreso de datos con un bucle while:

while True:
    nombre = input("Ingrese el nombre del equipo (o 'fin' para terminar): ")
    if nombre.lower() == "fin":
        break  # Termina el bucle si el usuario escribe 'fin'
        
    goles_equipo = int(input(f"Ingrese los goles anotados por {nombre}: "))
    equipos.append(nombre)
    goles.append(goles_equipo)


Aqui el programa solicita el nombre del equipo y los goles anotados.
Si el usuario escribe 'fin', el ciclo termina.
Cada dato ingresado se guarda en las listas equipos y goles.
Se usa int() para asegurar que los goles sean números enteros.

c) Verificación de que existan datos
if len(equipos) == 0:
    print("No se ingresaron datos.")
    return  # Sale de la función si no hay datos

Aqui se verifica si no se ingresó ningún equipo.
Si las listas están vacías, el programa informa y finaliza la función.

d) Cálculos estadísticos
promedio = sum(goles) / len(goles)
Aqui se calcula el promedio de goles dividiendo la suma total entre el número de equipos.

mayor_goles = max(goles)
menor_goles = min(goles)
mejor_equipo = equipos[goles.index(mayor_goles)]
peor_equipo = equipos[goles.index(menor_goles)]

Este fragmento de codigo determina:
El mayor número de goles.
El menor número de goles.
El equipo con más goles y el equipo con menos goles, usando los índices en las listas.

e) Impresión de resultados
print("\n=== Resultados del análisis ===")
print(f"Equipos analizados: {len(equipos)}")
print(f"Promedio de goles: {promedio:.2f}")
print(f"Equipo con más goles: {mejor_equipo} ({mayor_goles} goles)")
print(f"Equipo con menos goles: {peor_equipo} ({menor_goles} goles)")

Aqui se muestra el resumen del análisis: número de equipos, promedio, mejor y peor equipo.

f) Evaluación con estructuras condicionales

if promedio >= 3:
    print("¡Temporada muy ofensiva!")
elif promedio >= 1.5:
    print("Temporada equilibrada.")
else:
    print("Pocos goles esta temporada.")


Según el promedio de goles, este fragmento clasifica el rendimiento general:

≥ 3 goles: Temporada ofensiva.
≥ 1.5 y < 3: Temporada equilibrada.
< 1.5: Pocos goles.
 
 g) Valor de retorno
 return promedio
Este return devuelve el promedio de goles calculado, por si se desea utilizar en otras partes del programa.

3. Programa principal

resultado = analizar_premier()
print("\nAnálisis finalizado.")

Aquí dividimos el programa en bloques o funciones que cumplen las tareas específicas del progrma y llama a la función analizar_premier() para ejecutar todo el análisis.
Implementamos programacion modular, lo cual implica que el programa no corre de forma completamente lineal, sino que se divide respecto a las funciones definidas,
Ventajas de esta implementacion en nuestro codigo:

-El código se organiza mejor
-Nos facilita el reutilizar las funciones en avances futuras y demas partes del programa
-Es más fácil de mantener y modificar, lo cual es una caracteristica que nos es de mucha utilidad, pues este es un proyecto con una vision enfocada al desarrolllo y el cambio, buscando siempre una evolucion productiva.
-Podemos hacer pruebas y mejoras sin tocar todo el programa o modificar todas las funciones

Para concluir, el programa una vez que termina, muestra un mensaje indicando que el proceso ha finalizado.

6.Descripción de las funciones principales
El programa cuenta con una función principal definida por el usuario y una sección de ejecución principal.
A continuación se explicamos como trabajan las funciones y sus propósitos:

1. Función analizar_premier()
Tipo: función definida por el usuario
Propósito: realizar el análisis completo de los datos ingresados por el usuario sobre los equipos y sus goles.

 Descripción detallada:
Esta función concentra toda la lógica del programa debido a que see encarga de:

1-Solicitar los datos al usuario (nombres de los equipos y goles).
2-Guardar la información en listas (equipos y goles).
3-Calcular estadísticas básicas, como:
 -Promedio de goles.
 -Equipo con más goles.
 -Equipo con menos goles.
4-Clasificar la temporada como ofensiva, equilibrada o con pocos goles según el promedio.
5-Mostrar los resultados en pantalla con mensajes claros.

2. Programa principal
Propósito: ejecutar la función principal y mostrar el resultado final del análisis.
Explicación:
- Llama a la función analizar_premier(), lo que pone en marcha todo el proceso.
- Al finalizar, imprime un mensaje indicando que el análisis concluyó.
- La variable resultado guarda el valor devuelto por la función (el promedio de goles).



8. Pruebas y Resultados

* Capturas de pantalla o ejemplos de ejecución
* Resultados obtenidos
* Manual de usuario

9. Conclusiones
* Lecciones aprendidas
* Dificultades encontradas y cómo se resolvieron
* Posibles mejoras o ideas futuras

10. Bibliografía / Recursos

  * Premier League–Página oficial: https://www.premierleague.com/
  * OneFootball–Estadísticas deportivas: https://onefootball.com/
  * SofaScore–Resultados deportivos: https://www.sofascore.com/
  * Score360–Datos de fútbol: https://www.score360.com/
  * Football-Data: https://www.football-data.com
  * Understad: https://understat.com/
  * StatsBomb: https://statsbomb.com/
  * https://www.datacamp.com/es/blog/60-python-projects-for-all-levels-expertise
  * https://prezi.com/p/hftmx3o1n96q/analisis-de-datos-de-la-premier-league/
  * https://espndeportes.espn.com/futbol/estadisticas/_/liga/ENG.1/vista/rendimiento/temporada/2024/english-premier-league
  * https://www.espn.com.co/futbol/estadisticas/_/liga/ENG.1/temporada/2024/vista/anotaciones/goles-de-europa

















